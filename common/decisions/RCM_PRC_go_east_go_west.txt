#If you change the values loc for WTT_border_incident_delay_until_new_incident_180 and WTT_border_incident_delay_until_new_incident_120 has to be changed
@border_incident_escalation_countdown = 30
@border_conflict_incident_forgotten_timer = 30
@border_conflict_escalate_to_war_countdown = 45
@border_conflict_time_until_cancelled = 360

RCM_border_clashes = {
	RCM_border_conflict_prepare_next_offensive = {
		icon = border_war		
		allowed = { always = no }
		available = {
			NOT = {
				1044 = {
					is_owned_and_controlled_by = ROOT
				}
			}
			divisions_in_border_state = {
				state = 1031
				border_state = 1044
				size > 0
			}
		}
		##days_re_enable = 400
		#visible = {
		#	tag = PRC
		#	owns_state = 1031
		#	#always = no
		#}
		is_good = no
		target_trigger = {
			#always = no
			FROM = {
				tag = NXM
			}
		}

		highlight_states = {
			highlight_states_trigger = {
				state = 1031
			}
		}
		#targeted_mission
		#ai_will_do = {
		#	base = 0.2
		#}

		#cost = 100

		fire_only_once = yes

		days_mission_timeout = 35
		war_with_target_on_remove = yes

		complete_effect = {
			activate_mission = RCM_border_conflict_initiate_incident
			PRC_border_conflict_NXM_option_second_time = yes
		}
	}

    RCM_border_conflict_prepare_next_offensive_937 = {
		icon = border_war		
		allowed = { always = no }
		available = {
			NOT = {
				1031 = {
					is_owned_and_controlled_by = ROOT
				}
			}
			divisions_in_border_state = {
				state = 1029
				border_state = 1031
				size > 0
			}
		}
		##days_re_enable = 400
		#visible = {
		#	tag = PRC
		#	owns_state = 1031
		#	#always = no
		#}
		is_good = no
		target_trigger = {
			#always = no
			FROM = {
				tag = NXM
			}
		}

		highlight_states = {
			highlight_states_trigger = {
				state = 1029
			}
		}
		#targeted_mission
		#ai_will_do = {
		#	base = 0.2
		#}

		#cost = 100

		fire_only_once = yes

		days_mission_timeout = 35
		war_with_target_on_remove = yes

		complete_effect = {
			activate_mission = RCM_border_conflict_initiate_incident_937
			PRC_border_conflict_NXM_option_937_w_939 = yes
		}
	}

	RCM_border_conflict_initiate_incident = {
		icon = border_war		
		allowed = { always = no }
		available = {
			always = no
		}
		cancel_trigger = {
			divisions_in_border_state = {
				state = 1031
				border_state = 1044
				size < 1
			}
		}
		target_trigger = {
			FROM = {
				tag = NXM
			}
		}

		highlight_states = {
		    highlight_states_trigger = {	
			    state = 1044
			    OR = {
				    state = FROM.defender_state_vs_@ROOT
				    AND = {
					    is_owned_and_controlled_by = FROM
					
					    set_temp_variable = { var:test_state_temp = id }
					    hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
					    any_neighbor_state = {
						    hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
						    set_temp_variable = { var:attacker_state_temp = id }
						    ROOT = {
							    divisions_in_border_state = {
								    state = var:attacker_state_temp
								    border_state = var:test_state_temp
								    size > 0
							    }
						    }
						    is_fully_controlled_by = ROOT
					    }
				    }
			    } 
		    }
		}
		#targeted_mission
		ai_will_do = {
			base = 0.2
		}

		#cost = 100

		fire_only_once = yes

		days_mission_timeout = @border_incident_escalation_countdown
		#days_re_enable = 150

		war_with_target_on_remove = yes

		#complete_effect = {
		#				
		#}
		timeout_effect = {
			hidden_effect = {
				if = {
					limit = {
						ROOT = {
							is_ai = yes
						}
						NXM = {
							is_ai = yes
						}
					}
					country_event = {
						days = 12 id = RCM_comchina_west_expedition.2
					}
					#XSM = {
					#	country_event = {
					#		days = 12 id = qng.2
					#	}
					#}
				}
			}
			PRC_border_conflict_NXM = yes
		}
	}

	RCM_border_conflict_initiate_incident_937 = {
		icon = border_war		
		allowed = { always = no }
		available = {
			always = no
		}
		cancel_trigger = {
			divisions_in_border_state = {
				state = 1029
				border_state = 1031
				size < 1
			}
		}
		target_trigger = {
			FROM = {
				tag = NXM
			}
		}

		highlight_states = {
		    highlight_states_trigger = {	
			    state = 1031
			    OR = {
				    state = FROM.defender_state_vs_@ROOT
				    AND = {
					    is_owned_and_controlled_by = FROM
					
					    set_temp_variable = { var:test_state_temp = id }
					    hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
					    any_neighbor_state = {
						    hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
						    set_temp_variable = { var:attacker_state_temp = id }
						    ROOT = {
							    divisions_in_border_state = {
								    state = var:attacker_state_temp
								    border_state = var:test_state_temp
								    size > 0
							    }
						    }
						    is_fully_controlled_by = ROOT
					    }
				    }
			    } 
		    }
		}
		#targeted_mission
		ai_will_do = {
			base = 0.2
		}

		#cost = 100

		fire_only_once = yes

		days_mission_timeout = @border_incident_escalation_countdown
		#days_re_enable = 150

		war_with_target_on_remove = yes

		#complete_effect = {
		#				
		#}
		timeout_effect = {
			hidden_effect = {
				if = {
					limit = {
						ROOT = {
							is_ai = yes
						}
						NXM = {
							is_ai = yes
						}
					}
					country_event = {
						days = 12 id = RCM_comchina_west_expedition.4
					}
					XSM = {
						country_event = {
							days = 12 id = qng.2
						}
					}
				}
			}
			PRC_border_conflict_NXM = yes
		}
	}

	#Mission for defender warning that a conflict with FROM is coming
	RCM_border_conflict_incident_warning_defender = {

		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			hidden_trigger = { always = no }
		}

		highlight_states = {
			highlight_states_trigger = {
				OR = {
					state = var:defender_state_temp
					state = var:ROOT.defender_state_vs_@FROM
				}
			}
		}

		war_with_target_on_timeout = yes
		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		days_mission_timeout = @border_incident_escalation_countdown

		fire_only_once = yes

		is_good = no
		
		timeout_effect = {
			custom_effect_tooltip = escalation_possible_tooltip_for_defender
			custom_effect_tooltip = effects_if_border_conflict_is_lost
			effect_tooltip = {
				add_political_power = -100
				var:ROOT.defender_state_vs_@FROM = { FROM = { transfer_state = PREV } }
			}
			hidden_effect = {
				remove_targeted_decision = { target = FROM decision = RCM_border_conflict_incident_warning_defender }
				activate_targeted_decision = { target = FROM decision = RCM_border_conflict_escalation_warning_defender }
			}
		}
	}

	#Mission for defender warning FROM can escalate to war at any point is coming
	RCM_border_conflict_escalation_warning_defender = {

		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			hidden_trigger = { always = no }
		}

		highlight_states = {
			highlight_states_trigger = {
				OR = {
					state = var:defender_state_temp
					state = var:ROOT.defender_state_vs_@FROM
				}
			}
		}

		war_with_target_on_timeout = yes
		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		days_mission_timeout = @border_conflict_incident_forgotten_timer

		fire_only_once = yes

		is_good = no

		timeout_effect = {
			custom_effect_tooltip = from_cannot_escalate
			custom_effect_tooltip = effects_if_border_conflict_is_lost
			effect_tooltip = {
				add_political_power = -100
				var:ROOT.defender_state_vs_@FROM = { FROM = { transfer_state = PREV } }
			}
		}		
	}

	#Mission for attacker to escalate or incident is forgotten
	#Decision to escalate incident on border with FROM to border conflict
	RCM_escalate_incident_to_border_conflict = {

		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			divisions_in_border_state = {
				state = var:FROM.attacker_state_vs_@ROOT
				border_state = var:FROM.defender_state_vs_@ROOT
				size > 0
			}
		}

		highlight_states = {
		    highlight_state_targets = {	
			    state = var:FROM.attacker_state_vs_@ROOT			
		    }
		}

		ai_will_do = {
			base = 200
			
		}
		
		cancel_trigger = {
			is_in_faction_with = FROM
		}

		selectable_mission = yes

		fire_only_once = yes #Reactivation handled in effect

		days_mission_timeout = @border_conflict_incident_forgotten_timer

		timeout_effect = {
			custom_effect_tooltip = RCM_border_incident_delay_until_new_incident_120
			hidden_effect = {
				FROM = { remove_targeted_decision = { target = ROOT decision = RCM_border_conflict_escalation_warning_defender } }
				FROM = {
					var:attacker_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					var:defender_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					clear_variable = attacker_state_vs_@ROOT
					clear_variable = defender_state_vs_@ROOT
				}
			}
		}

		complete_effect = {
			start_border_war = {
				change_state_after_war = no
				attacker = {
					state = var:FROM.attacker_state_vs_@ROOT
					num_provinces = 4
					on_win = RCM_border_conflict_won_attacker.1
					on_lose = RCM_border_conflict_lost_attacker.1
					on_cancel = RCM_border_conflict_canceled_attacker.1
				}
				
				defender = {
					state = var:FROM.defender_state_vs_@ROOT
					num_provinces = 4
					on_win = RCM_border_conflict_won_defender.1
					on_lose = RCM_border_conflict_lost_defender.1
					on_cancel = RCM_border_conflict_canceled_defender.1
				}
			}
			hidden_effect = { FROM = { remove_targeted_decision = { target = ROOT decision = RCM_border_conflict_escalation_warning_defender } } }
			FROM = {
				activate_targeted_decision = { target = ROOT decision = RCM_border_conflict_escalate_conflict }
				activate_targeted_decision = { target = ROOT decision = RCM_border_conflict_time_until_cancelled }
			}
			activate_targeted_decision = { target = FROM decision = RCM_border_conflict_escalate_conflict }
			activate_targeted_decision = { target = FROM decision = RCM_border_conflict_time_until_cancelled }
		}
	}

	#Mission for attacker to win border war against FROM in X days
	RCM_border_conflict_time_until_cancelled = {

		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			var:FROM.defender_state_vs_@ROOT = { has_border_war = no }
			var:FROM.attacker_state_vs_@ROOT = { has_border_war = no }
		}

		highlight_states = {
		    highlight_states_trigger = {
				OR = {
					state = var:defender_state_temp		
					state = var:FROM.defender_state_vs_@ROOT
				}
			}
		}
		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		days_mission_timeout = 90 #@border_conflict_time_until_cancelled #MODDED in 1.11
		is_good = no

		fire_only_once = yes #Reactivation handled in effect

		complete_effect = {

		}

		timeout_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				cancel_border_war = {
					defender = var:defender_state_vs_@FROM
					attacker = var:attacker_state_vs_@FROM
				}
			}
			else = {
				cancel_border_war = {
					defender = var:FROM.defender_state_vs_@ROOT
					attacker = var:FROM.attacker_state_vs_@ROOT
				}
			}
			hidden_effect = {
				remove_targeted_decision = { target = FROM decision = RCM_border_conflict_escalate_conflict }
			}
		}
	}

	#Decision to escalate conflict further
	RCM_border_conflict_escalate_conflict = {

		icon = decision_generic_ignite_civil_war

		allowed = { always = no } #Activated from effect

		visible = {
			has_border_war_with = FROM
		}

		highlight_states = {
		    highlight_states_trigger = {
				OR = {
				state = var:FROM.attacker_state_vs_@ROOT	
				state = var:ROOT.defender_state_vs_@FROM
				}
			}
		}

		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		fire_only_once = yes #Reactivation handled in effect
		cost = 75
		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				set_border_war_data = {
					attacker = var:ROOT.attacker_state_vs_@FROM
					defender = var:ROOT.defender_state_vs_@FROM
					defender_modifier = 0.15
					combat_width = 100
				}
			}
			else = {
				set_border_war_data = {
					attacker = var:FROM.attacker_state_vs_@ROOT
					defender = var:FROM.defender_state_vs_@ROOT
					attacker_modifier = 0.15
					combat_width = 100
				}
			}
			FROM = {
				set_country_flag = {
					flag = RCM_border_conflict_escalate_to_war_cooldown_@ROOT
					days = @border_conflict_escalate_to_war_countdown
					value = 1
				}
				remove_targeted_decision = { target = ROOT decision = RCM_border_conflict_escalate_conflict }
			}
			set_country_flag = {
				flag = RCM_border_conflict_escalate_to_war_cooldown_@FROM
				days = @border_conflict_escalate_to_war_countdown
				value = 1
			}
			#custom_effect_tooltip = in_45_days
			#disable for these
			#activate_targeted_decision = { target = FROM decision = RCM_border_conflict_escalate_to_war }
		}
	}

	#Decision to escalate conflict further
	RCM_border_conflict_escalate_to_war = {

		icon = decision_generic_ignite_civil_war

		allowed = { always = no } #Activated from effect
		cost = 125
		visible = {
			NOT = { has_country_flag = RCM_border_conflict_escalate_to_war_cooldown_@FROM }
			has_border_war_with = FROM
		}

		highlight_states = {
		    highlight_states_trigger = {
				OR = { 
					state = var:FROM.defender_state_vs_@ROOT	
					state = var:ROOT.attacker_state_vs_@FROM
				}
			}
		}

		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		days_remove = 15

		fire_only_once = yes #Reactivation handled in effect

		war_with_target_on_remove = yes

		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				var:ROOT.defender_state_vs_@FROM = { save_event_target_as = their_state }
				var:ROOT.attacker_state_vs_@FROM = { save_event_target_as = our_state }
			}
			else = {
				var:FROM.defender_state_vs_@ROOT = { save_event_target_as = our_state }
				var:FROM.attacker_state_vs_@ROOT = { save_event_target_as = their_state }
			}
			FROM = {
				country_event = { id = RCM_border_conflict_escalate_to_war.1 }
				hidden_effect = {
					remove_targeted_decision = { target = ROOT decision = RCM_border_conflict_escalate_to_war }
				}
		 	}
		}

		remove_effect = {
			cancel_border_war = {
				dont_fire_events = yes
				defender = var:FROM.defender_state_vs_@ROOT
				attacker = var:FROM.attacker_state_vs_@ROOT
			}
			declare_war_on = { target = FROM type = annex_everything }
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				var:attacker_state_vs_@FROM = {
					clr_state_flag = border_incident_active
				}
				var:defender_state_vs_@FROM = {
					clr_state_flag = border_incident_active
				}
				clear_variable = attacker_state_vs_@FROM
				clear_variable = defender_state_vs_@FROM
			}
			else = {
				FROM = {
					var:attacker_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					var:defender_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					clear_variable = attacker_state_vs_@ROOT
					clear_variable = defender_state_vs_@ROOT
				}
			}
		}
	}

	#Decision to back down from conflict
	RCM_border_conflict_back_out_of_conflict = {

		allowed = { always = no } #Activated from effect

		visible = {
			has_border_war_with = FROM
		}

		highlight_states = {
		    highlight_states_trigger = {
				OR = {	
				state = var:FROM.attacker_state_vs_@ROOT
				state = var:ROOT.defender_state_vs_@FROM
				}
			}
		}

		ai_will_do = {
			base = 0
			modifier = {
				
			}
		}

		fire_only_once = yes #Reactivation handled in effect

		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				finalize_border_war = {
					attacker_win = yes
					attacker = ROOT.attacker_state_vs_@FROM
					defender = ROOT.attacker_state_vs_@FROM
				}
			}
			else = {
				finalize_border_war = {
					attacker = FROM.attacker_state_vs_@ROOT
					defender = FROM.attacker_state_vs_@ROOT
					defender_win = yes
				}
			}
		}
	}
}